{"version":3,"sources":["BulletNote/actions/index.ts","BulletNote/types.ts","BulletNote/functions/handleParseMessage.ts","BulletNote/functions/HandleDataInLocalStorage.ts","BulletNote/reducers/message-reducers.ts","BulletNote/reducers/index.ts","BulletNote/constants/context.ts","lib/customHooks/useInput.ts","BulletNote/components/InputPart/InputPart.tsx","BulletNote/containers/InputPart/InputPartContainer.tsx","BulletNote/actions/message-actions.ts","BulletNote/components/DownloadMessageList.tsx","BulletNote/functions/handleUploadData.ts","BulletNote/components/RestoreBackup.tsx","BulletNote/components/BulletTagItem.tsx","BulletNote/components/BullteTagList.tsx","BulletNote/components/MessageItemButtons.tsx","BulletNote/functions/useToggle.ts","BulletNote/containers/NotePart/StarItemContainer.tsx","BulletNote/containers/NotePart/PinItemContainer.tsx","BulletNote/components/BasicMessageItem.tsx","BulletNote/containers/BasicMessageItemContainer.tsx","BulletNote/components/wrappers/MessageItemWrapper.tsx","BulletNote/containers/wrappers/MessageItemWrapperContainer.tsx","BulletNote/components/TodoMessageItem.tsx","BulletNote/containers/NotePart/TodoMessageItemContainer.tsx","BulletNote/components/DefaultMessageItem.tsx","BulletNote/functions/switchMessagesByType.tsx","BulletNote/components/NotePart/PinMessageList.tsx","BulletNote/functions/handleMessageListToMessageWithDateList.ts","BulletNote/components/DateTitle.tsx","BulletNote/functions/handleTagSortMessage.ts","BulletNote/components/TagNoteBlockItem.tsx","BulletNote/config.ts","BulletNote/containers/NotePart/TagNoteBlockItemContainer.tsx","BulletNote/components/NoteBlockItem.tsx","BulletNote/functions/checkDateIsToday.ts","BulletNote/components/NoteBlockList.tsx","BulletNote/functions/useScrollToView.ts","BulletNote/containers/NoteBlockListContainer.tsx","BulletNote/components/NotePart/NotePart.tsx","BulletNote/containers/NotePart/NotePartContainer.tsx","BulletNote/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["BulletNoteActionTypes","MESSAGE_TYPE","HandleParseMessage","str","replace","messageParams","tagList","createdAt","handledTagList","createdAtTime","Date","length","this","defaultTag","dateTagList","todoMessageStatus","_tagName","tagName","removeSpaceInStr","id","name","rawMessage","matchedRes","match","tagReg","map","r","getTagItem","isTodoType","todoReg","isReviewType","reviewReg","console","log","DEFAULT","TODO","res","removeReviewPresetReg","singleRawMessageFromDB","isDone","isPin","messageType","getMessageType","getTagListFromRawMessage","content","getRemovedTypeAndTagsMessage","message","makeBasicMessage","status","makeTodoStatus","type","HandleDataInLocalStorage","messageList","m","undefined","isStared","rawMessageList","convertMessageListToRawMessageList","dataStr","JSON","stringify","localStorage","setItem","data","getItem","parse","inputPartReducers","state","action","newMessageList","ADD_MESSAGE","lastMessageId","Number","slice","newId","String","handledMessage","convertRawMessageToMessageItem","payload","SET_MESSAGE_FROM_DB","rawMessageFromDBList","DELETE_MESSAGE","filter","TOGGLE_MESSAGE_ISDONE","index","findIndex","TOGGLE_MESSAGE_ISSTAR","isStar","TOGGLE_MESSAGE_ISPIN","EDIT_MESSAGE","newMessage","tagsStr","t","join","setData","reducers","combineReducers","initState","ContextValueFn","createContextValueFn","ContextStore","createContextStore","ContextWrapper","ContextWrapperFn","useInput","useState","value","setVal","handleChange","useCallback","e","target","InputPart","props","onChange","onSendMessage","Box","display","paddingTop","TextField","autoFocus","variant","fullWidth","paddingLeft","Button","onClick","InputPartContainerWithCtx","connectCtx","dispatch","addMessageFn","addMessage","handleSendMessage","useFnsByKeyCode","lastIndex","confirmFn","escapeFn","DownloadMessageListWithCtx","timeStamp","toLocaleString","href","encodeURIComponent","download","handleUploadData","getHandledDataFn","reader","FileReader","files","readAsText","addEventListener","result","handledRes","RestoreBackup","useStyles","makeStyles","theme","root","cursor","backgroundColor","borderRadius","spacing","opacity","BulletTagItem","classes","className","paddingRight","BulletTagList","i","key","MessageItemButtons","onDelete","Delete","useToggle","init","toggle","setToggle","handleToggle","s","useEffect","StarItemContainer","style","Star","StarBorder","PinItemContainer","isPined","Flag","FlagOutlined","BasicMessageItem","width","justifyContent","alignItems","Typography","contentEditable","onInput","onEditMessage","color","date","hour","getHours","min","getMinutes","regDateToString","onStarMessage","onPinMessage","BasicMessageItemContainerWithCtx","editActionFn","editMessage","starActionFn","toggleMessageIsStar","pinActionFn","toggleMessageIsPin","handleEdit","innerText","handleToggleStarMessage","handleTogglePinMessage","MessageItemWrapper","children","MessageItemWrapperContainerWithCtx","deleteMessage","handleDelete","window","confirm","TodoMessageItem","Checkbox","onToggleTodo","checked","TodoMessageItemContainerWithCtx","toggleTodoActionFn","toggleMessageIsDone","handleToggleTodo","DefaultMessageItem","KeyboardArrowRight","switchMessagesByType","messageItemProps","PinMessageList","filteredPinMessageList","Paper","elevation","Divider","HandleMessageList","toLocaleDateString","date1","date2","_messageList","noteBlockIndex","messageWithDateList","messageItem","checkTwoDateIsSame","removeYearRegExp","DateTitle","dateWithoutYear","HandleTagSortMessage","strList","newStr","includes","newStrList","checkNewStrIsInStrList","addNewStrToStrList","singleMessage","tags","tagNoteBlockObj","singleMessageTags","getTagNamesFromMessage","addNewStrListToStrList","checkNewStrListIsInStrList","newTag","tagTitle","TagNoteBlockItem","TagNoteBlockItemContainer","borderColor","selected","borderWidth","borderStyle","NoteBlockItem","getTagNoteBlockObj","Object","keys","padding","paddingBottom","checkDateIsToday","NoteBlockList","messageListWithDate","convertToMessageWithDateList","useScrollToView","ref","useRef","handleScrollToView","current","scrollIntoView","block","NoteBlockListContainer","React","RootRef","rootRef","pinMessageListPart","position","top","maxHeight","overflow","zIndex","boxShadow","NotePart","NotePartContainerWithCtx","setMessageFromDB","getData","notePart","inputPart","bottom","left","right","BulletNote","customInitState","Container","App","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.02567e53.chunk.js","sourcesContent":["import InputPartActions from \"./message-actions\";\r\n\r\nexport enum BulletNoteActionTypes {\r\n  ADD_MESSAGE = 'ADD_MESSAGE',\r\n  DELETE_MESSAGE = 'DELETE_MESSAGE',\r\n  SET_MESSAGE_FROM_DB = 'SET_MESSAGE_FROM_DB',\r\n\r\n  TOGGLE_MESSAGE_ISDONE = 'TOGGLE_MESSAGE_ISDONE',\r\n  TOGGLE_MESSAGE_ISSTAR = 'TOGGLE_MESSAGE_ISSTAR',\r\n  TOGGLE_MESSAGE_ISPIN = 'TOGGLE_MESSAGE_ISPIN',\r\n\r\n  EDIT_MESSAGE = 'EDIT_MESSAGE',\r\n  EDIT_IT = 'EDIT_IT',\r\n}\r\n\r\ntype BulletNoteActions = InputPartActions\r\n\r\nexport default BulletNoteActions;","import { ID } from \"common-types\";\r\nimport { ToDoMessageItemProps, UrgentMessageItemProps, DefaultMessageItemProps, ToggleTodoFn } from \"./components/types\";\r\n\r\ntype RawMessage = string\r\n\r\nexport enum MESSAGE_TYPE  {\r\n  'DEFAULT' = 'DEFAULT',\r\n  'URGENT' = 'URGENT',\r\n  'TODO' = 'TODO',\r\n  'REVIEW' = 'REVIEW',\r\n}\r\n\r\nexport interface TagItem {\r\n  id: ID\r\n  name: string\r\n}\r\n\r\nexport interface BulletTagItemProps {\r\n  tagName: string\r\n}\r\n\r\nexport interface BulletTagListProps {\r\n  tagList: TagItem[]\r\n}\r\n\r\nexport interface DateTagItem {\r\n    date: Date\r\n  }\r\n\r\nexport interface UrgentMessageStatus {\r\n    dueTime: Date\r\n    urgentLevel: number\r\n    name: string\r\n  }\r\n\r\nexport interface TodoMessageStatus {\r\n  name: string\r\n  isDone?: boolean\r\n  dueTime?: Date | string\r\n}\r\n\r\nexport interface SingleRawMessageFromDB {\r\n  id: string\r\n  isDone?: boolean\r\n  isPin?: boolean\r\n  isStared?: boolean\r\n  rawMessage: RawMessage\r\n  createdAt?: string | Date\r\n}\r\n\r\nexport interface BasicMessage {\r\n  id: string\r\n  isStared?: boolean\r\n  isPin?: boolean\r\n  rawMessage: RawMessage\r\n  content: string\r\n  tagList: TagItem[]\r\n  createdAt: Date | string\r\n  dateTagList: DateTagItem[]\r\n}\r\n\r\nexport type MessageItem = \r\n  ToDoMessageItemProps | \r\n  UrgentMessageItemProps | \r\n  DefaultMessageItemProps\r\n\r\nexport type MessageList = MessageItem[]\r\n\r\nexport interface MessageListWithDate {\r\n    date: Date | string\r\n    messageList: MessageList\r\n  }\r\n\r\nexport interface NoteBlockItemProps extends MessageListWithDate {\r\n  selected?: boolean\r\n}\r\n\r\nexport interface TagNoteBlockItem {\r\n  tagTitle: string\r\n  messageList: MessageList\r\n}\r\nexport interface TagNoteBlockItemProps extends TagNoteBlockItem {\r\n}\r\nexport type TagNoteBlockList = TagNoteBlockItem[]\r\nexport interface TagNoteBlockObj {\r\n  [x: string]: TagNoteBlockItem\r\n}\r\n\r\nexport interface TagNoteBlockItemProps extends TagNoteBlockItem {}\r\nexport interface TagNoteBlockListProps {\r\n  tagNoteBlockList: TagNoteBlockList\r\n}\r\n\r\nexport interface NoteBlockListProps {\r\n    messageList: MessageList\r\n  }\r\n\r\nexport interface DateTitleProps {\r\n    date: Date | string\r\n  }\r\n\r\n","import { MESSAGE_TYPE, TagItem, BasicMessage, TodoMessageStatus, MessageItem, SingleRawMessageFromDB } from \"../types\";\r\n\r\nclass HandleParseMessage {\r\n  static todoReg = /(\\[\\]\\s)?/\r\n  static reviewReg = /(\\*(\\s)?)\\w+/g\r\n  static removeReviewPresetReg = /(\\*(\\s))/g\r\n  static tagReg = /#\\w+(\\s)?/g\r\n  static defaultTag: TagItem = {\r\n    id: 'notDefinedTag',\r\n    name: '#未分類'\r\n  }\r\n\r\n  static removeSpaceInStr(str: string) {\r\n    return str.replace(/\\s/g, '');\r\n  }\r\n\r\n  static makeBasicMessage(messageParams: {\r\n    id: string, \r\n    content: string, \r\n    tagList: TagItem[], \r\n    rawMessage: string\r\n    createdAt?: Date | string,\r\n    isStared?: boolean,\r\n    isPin?: boolean,\r\n  }): BasicMessage {\r\n    const {\r\n      tagList,\r\n      createdAt,\r\n    } = messageParams;\r\n    \r\n    let handledTagList = tagList;\r\n    const createdAtTime = createdAt ? new Date(createdAt) : new Date();\r\n    if(tagList.length === 0) {\r\n      handledTagList = [this.defaultTag];\r\n    }\r\n\r\n    return ({\r\n      ...messageParams,\r\n      tagList: handledTagList,\r\n      createdAt: createdAtTime,\r\n      dateTagList: [],\r\n    });\r\n  }\r\n\r\n  static makeTodoStatus(todoMessageStatus: TodoMessageStatus): TodoMessageStatus {\r\n    return ({\r\n      ...todoMessageStatus\r\n    });\r\n  }\r\n\r\n  static getTagItem(_tagName: string): TagItem {\r\n    const tagName = this.removeSpaceInStr(_tagName);\r\n    return ({\r\n      id: tagName,\r\n      name: tagName,\r\n    });\r\n  }\r\n\r\n  static getTagListFromRawMessage(rawMessage: string): TagItem[] {\r\n    const matchedRes = rawMessage.match(this.tagReg);\r\n    if(!!matchedRes) {\r\n      return matchedRes.map(r => this.getTagItem(r));\r\n    }\r\n    return [];\r\n  }\r\n\r\n  static getMessageType(rawMessage: string) {\r\n    const isTodoType = rawMessage.match(this.todoReg);\r\n    const isReviewType = rawMessage.match(this.reviewReg);\r\n    console.log(isTodoType, isReviewType);\r\n\r\n    if(isReviewType) {\r\n      return MESSAGE_TYPE.DEFAULT;\r\n    }\r\n\r\n    if(isTodoType) {\r\n      return MESSAGE_TYPE.TODO;\r\n    }\r\n    // else if(isReviewType) {\r\n    //   return MESSAGE_TYPE.REVIEW;\r\n    // }\r\n    // return MESSAGE_TYPE.DEFAULT; \r\n  }\r\n\r\n  static getRemovedTypeAndTagsMessage(rawMessage: string): string {\r\n    let res = rawMessage;\r\n    res = res.replace(this.tagReg, '');\r\n    res = res.replace(this.todoReg, '');\r\n    res = res.replace(this.removeReviewPresetReg, '');\r\n    return res;\r\n  }\r\n\r\n  static convertRawMessageToMessageItem(\r\n    singleRawMessageFromDB: SingleRawMessageFromDB\r\n  ): MessageItem {\r\n    const {\r\n      isDone,\r\n      isPin,\r\n      rawMessage,\r\n    } = singleRawMessageFromDB;\r\n\r\n    const messageType = this.getMessageType(rawMessage);\r\n    const tagList = this.getTagListFromRawMessage(rawMessage);\r\n    const content = this.getRemovedTypeAndTagsMessage(rawMessage);\r\n    const message = this.makeBasicMessage({\r\n      ...singleRawMessageFromDB,\r\n      isPin,\r\n      tagList,\r\n      content,\r\n    });\r\n\r\n    switch (messageType) {\r\n    case MESSAGE_TYPE.TODO: {\r\n      const status = this.makeTodoStatus({\r\n        name: '',\r\n        isDone,\r\n      });\r\n      return ({\r\n        type: MESSAGE_TYPE.TODO,\r\n        status,\r\n        message,\r\n      });\r\n    }\r\n    default:\r\n      return ({\r\n        type: MESSAGE_TYPE.DEFAULT,\r\n        status: {},\r\n        message,\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default HandleParseMessage;","import { MessageList, SingleRawMessageFromDB, MESSAGE_TYPE } from \"../types\";\r\n\r\nconst messageListLS = 'messageListLS';\r\n\r\nclass HandleDataInLocalStorage {\r\n  static convertMessageListToRawMessageList(messageList: MessageList): SingleRawMessageFromDB[] {\r\n    return messageList.map(m => {\r\n      let isDone = undefined;\r\n      if(m.type === MESSAGE_TYPE.TODO) {\r\n        isDone = m.status.isDone;\r\n      }\r\n      return ({\r\n        id: m.message.id,\r\n        isDone,\r\n        rawMessage: m.message.rawMessage,\r\n        createdAt: new Date(m.message.createdAt),\r\n        isStared: m.message.isStared,\r\n        isPin: m.message.isPin,\r\n      });\r\n    });\r\n  }\r\n\r\n  static setData(messageList: MessageList) {\r\n    const rawMessageList = this.convertMessageListToRawMessageList(\r\n      messageList,\r\n    );\r\n    const dataStr = JSON.stringify(rawMessageList);\r\n    localStorage.setItem(messageListLS, dataStr);\r\n  }\r\n\r\n  static getData(): SingleRawMessageFromDB[] {\r\n    const data = localStorage.getItem(messageListLS);\r\n    if(data) {\r\n      return JSON.parse(data);\r\n    }\r\n    return [];\r\n  };\r\n}\r\n\r\nexport default HandleDataInLocalStorage;","import { BulletNoteState } from \"../constants/context\";\r\nimport InputPartActions from \"../actions/message-actions\";\r\nimport { BulletNoteActionTypes } from \"../actions\";\r\nimport HandleParseMessage from \"../functions/handleParseMessage\";\r\nimport HandleDataInLocalStorage from \"../functions/HandleDataInLocalStorage\";\r\nimport { MESSAGE_TYPE, MessageItem } from \"../types\";\r\nimport { ToDoMessageItemProps } from \"../components/types\";\r\n\r\nconst inputPartReducers = (state: BulletNoteState, action: InputPartActions): BulletNoteState['messageList'] => {\r\n  let newMessageList = [...state.messageList];\r\n\r\n  switch (action.type) {\r\n  case BulletNoteActionTypes.ADD_MESSAGE: {\r\n    const {\r\n      messageList\r\n    } = state;\r\n    const lastMessageId = messageList.length === 0 ? (\r\n      -1\r\n    ): Number(messageList.slice(-1)[0].message.id);\r\n    const newId = String(lastMessageId + 1);\r\n    \r\n    const handledMessage = HandleParseMessage\r\n      .convertRawMessageToMessageItem({\r\n        id: newId,\r\n        rawMessage: action.payload.rawMessage\r\n      });\r\n    newMessageList = [\r\n      ...state.messageList,\r\n      handledMessage,\r\n    ];\r\n    break;\r\n  }\r\n\r\n  case BulletNoteActionTypes.SET_MESSAGE_FROM_DB: {\r\n    const {\r\n      rawMessageFromDBList\r\n    } = action.payload;\r\n    const messageList = rawMessageFromDBList.map((r) => (\r\n      HandleParseMessage.convertRawMessageToMessageItem(r)\r\n    ));\r\n    newMessageList = messageList;\r\n    break;\r\n  }\r\n\r\n  case BulletNoteActionTypes.DELETE_MESSAGE: {\r\n    const {\r\n      id\r\n    } = action.payload;\r\n    newMessageList = state.messageList.filter(m => {\r\n      return id !== m.message.id;\r\n    });\r\n    break;\r\n  }\r\n\r\n  case BulletNoteActionTypes.TOGGLE_MESSAGE_ISDONE: {\r\n    const {\r\n      id,\r\n      isDone\r\n    } = action.payload;\r\n\r\n    const index = newMessageList.findIndex((m) => m.message.id === id);\r\n    if(index !== -1) {\r\n      if(newMessageList[index].type === MESSAGE_TYPE.TODO) {\r\n        newMessageList[index] = {\r\n          ...newMessageList[index],\r\n          status: {\r\n            ...newMessageList[index].status,\r\n            isDone: isDone,\r\n          }\r\n        } as ToDoMessageItemProps;\r\n      }\r\n    }\r\n    break;\r\n  }\r\n\r\n  case BulletNoteActionTypes.TOGGLE_MESSAGE_ISSTAR: {\r\n    const {\r\n      id,\r\n      isStar\r\n    } = action.payload;\r\n    console.log(id,\r\n      isStar);\r\n\r\n    const index = newMessageList.findIndex((m) => m.message.id === id);\r\n    if(index !== -1) {\r\n      newMessageList[index] = {\r\n        ...newMessageList[index],\r\n        message: {\r\n          ...newMessageList[index].message,\r\n          isStared: isStar\r\n        }\r\n      };\r\n    }\r\n    break;\r\n  }\r\n\r\n  case BulletNoteActionTypes.TOGGLE_MESSAGE_ISPIN: {\r\n    const {\r\n      id,\r\n      isPin\r\n    } = action.payload;\r\n\r\n    const index = newMessageList.findIndex((m) => m.message.id === id);\r\n    if(index !== -1) {\r\n      newMessageList[index] = {\r\n        ...newMessageList[index],\r\n        message: {\r\n          ...newMessageList[index].message,\r\n          isPin,\r\n        }\r\n      };\r\n    }\r\n    break;\r\n  }\r\n  \r\n  case BulletNoteActionTypes.EDIT_MESSAGE: {\r\n    const {\r\n      id,\r\n      newMessage\r\n    } = action.payload;\r\n\r\n    const index = newMessageList.findIndex((m) => m.message.id === id);\r\n    if(index !== -1) {\r\n      const tagsStr = newMessageList[index].message.tagList.map(t => {\r\n        if(t.id === HandleParseMessage.defaultTag.id) return '';\r\n        return t.name;\r\n      }).join(' ');\r\n      newMessageList[index] = {\r\n        ...newMessageList[index],\r\n        message: {\r\n          ...newMessageList[index].message,\r\n          rawMessage: newMessage + ' ' + tagsStr,\r\n        }\r\n      };\r\n        \r\n      console.log(newMessageList[index].message.tagList);\r\n    }\r\n    break;\r\n  }\r\n\r\n  default:\r\n    break;\r\n  }\r\n  \r\n  HandleDataInLocalStorage.setData(newMessageList);\r\n  return newMessageList;\r\n};\r\n\r\nexport default inputPartReducers;","import { combineReducers } from \"react-function-helpers\";\r\nimport { BulletNoteState } from \"../constants/context\";\r\nimport inputPartReducers from \"./message-reducers\";\r\n\r\nconst reducers = combineReducers<BulletNoteState>({\r\n  messageList: inputPartReducers,\r\n});\r\n\r\nexport default reducers;","import { MessageList } from \"../types\";\r\nimport { createContextValueFn, createContextStore } from \"react-function-helpers/lib/functions/contextHelpers\";\r\nimport reducers from \"../reducers\";\r\nimport ContextWrapperFn from \"react-function-helpers/lib/functions/ContextWrapper\";\r\n\r\nexport interface BulletNoteState {\r\n  messageList: MessageList\r\n}\r\n\r\nconst initState: BulletNoteState = {\r\n  messageList: []\r\n};\r\n\r\nconst ContextValueFn  = createContextValueFn(initState, reducers);\r\n\r\nexport const ContextStore = createContextStore(initState);\r\n\r\nexport const ContextWrapper = ContextWrapperFn(ContextValueFn, ContextStore);\r\n\r\nexport default ContextWrapper;\r\n","import { useState, useCallback, ChangeEvent } from \"react\";\r\n\r\nconst useInput = () => {\r\n  const [value, setVal] = useState('');\r\n\r\n  const handleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    const { value } = e.target;\r\n    setVal(value);\r\n  }, []);\r\n\r\n  return ({\r\n    handleChange,\r\n    value,\r\n    setVal\r\n  });\r\n};\r\n\r\nexport default useInput;","import React from 'react';\r\nimport { Box, TextField, Button } from '@material-ui/core';\r\nimport { InputPartProps } from './types';\r\n\r\nconst InputPart = (props: InputPartProps) => {\r\n  const {\r\n    value,\r\n    onChange,\r\n    onSendMessage\r\n  } = props;\r\n\r\n  return (\r\n    <Box display={'flex'} paddingTop={1}>\r\n      <TextField\r\n        autoFocus={true}\r\n        variant={'outlined'}\r\n        fullWidth={true}\r\n        value={value}\r\n        onChange={onChange} />\r\n      <Box paddingLeft={1}>\r\n        <Button onClick={onSendMessage}>\r\n          {'send'}\r\n        </Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default InputPart;","import React, { useCallback } from 'react';\r\nimport { Box } from '@material-ui/core';\r\nimport useInput from 'lib/customHooks/useInput';\r\nimport InputPart from 'BulletNote/components/InputPart/InputPart';\r\nimport { MapDispatchToProps } from 'react-function-helpers/lib/functions/mapContextToProps';\r\nimport { InputPartContainerProps } from '../types';\r\nimport { addMessage } from 'BulletNote/actions/message-actions';\r\nimport { connectCtx } from 'react-function-helpers';\r\nimport { ContextStore } from '../../constants/context';\r\nimport { useFnsByKeyCode } from 'react-function-helpers/lib/lib/customHooks/useFnsByKeyCode';\r\n\r\nconst InputPartContainer = (props: InputPartContainerProps) => {\r\n  const {\r\n    value,\r\n    setVal,\r\n    handleChange,\r\n  } = useInput();\r\n\r\n  const handleSendMessage = useCallback(() => {\r\n    if(value.length > 0) {\r\n      props.addMessageFn(value);\r\n      setVal('');\r\n    }\r\n  }, [props, setVal, value]);\r\n\r\n  useFnsByKeyCode({\r\n    lastIndex: 0,\r\n    confirmFn: handleSendMessage,\r\n    escapeFn: () => {}\r\n  }); \r\n\r\n  return (\r\n    <InputPart\r\n      value={value}\r\n      onChange={handleChange}\r\n      onSendMessage={handleSendMessage} />\r\n  );\r\n};\r\n\r\ninterface OwnProps {}\r\n\r\nconst mapDispatchToProps: MapDispatchToProps<OwnProps, InputPartContainerProps> = (dispatch) => {\r\n  return ({\r\n    addMessageFn: (rawMessage: string) => {\r\n      const action = addMessage(rawMessage);\r\n      dispatch(action);\r\n    }\r\n  });\r\n};\r\n\r\nconst InputPartContainerWithCtx = connectCtx(ContextStore)(undefined, mapDispatchToProps)(InputPartContainer);\r\n\r\nexport default InputPartContainerWithCtx;","import { BulletNoteActionTypes } from \".\";\r\nimport { SingleRawMessageFromDB } from \"../types\";\r\n\r\ninterface AddMessageActionPayload {\r\n  rawMessage: string\r\n}\r\ninterface SetMessageFromDB {\r\n  rawMessageFromDBList: SingleRawMessageFromDB[]\r\n}\r\ninterface DeleteMessageActionPayload {\r\n  id: string\r\n}\r\ninterface ToggleMessageIsDonePayload {\r\n  id: string\r\n  isDone: boolean\r\n}\r\n\r\ninterface ToggleMessageIsStarPayload {\r\n  id: string\r\n  isStar: boolean | undefined\r\n}\r\n\r\ninterface ToggleMessageIsPinPayload {\r\n  id: string\r\n  isPin: boolean | undefined\r\n}\r\n\r\ninterface EditMessageActionPayload {\r\n  id: string\r\n  newMessage: string\r\n}\r\n\r\ninterface DeleteMessageAction {\r\n  type: BulletNoteActionTypes.DELETE_MESSAGE,\r\n  payload: DeleteMessageActionPayload\r\n}\r\ninterface AddMessageAction {\r\n  type: BulletNoteActionTypes.ADD_MESSAGE,\r\n  payload: AddMessageActionPayload\r\n}\r\ninterface SetMessageFromDBAction {\r\n  type: BulletNoteActionTypes.SET_MESSAGE_FROM_DB,\r\n  payload: SetMessageFromDB\r\n}\r\ninterface ToggleMessageIsDone {\r\n  type: BulletNoteActionTypes.TOGGLE_MESSAGE_ISDONE,\r\n  payload: ToggleMessageIsDonePayload\r\n}\r\ninterface ToggleMessageIsStar {\r\n  type: BulletNoteActionTypes.TOGGLE_MESSAGE_ISSTAR,\r\n  payload: ToggleMessageIsStarPayload\r\n}\r\n\r\ninterface ToggleMessageIsPin {\r\n  type: BulletNoteActionTypes.TOGGLE_MESSAGE_ISPIN,\r\n  payload: ToggleMessageIsPinPayload\r\n}\r\n\r\ninterface EditMessageAction {\r\n  type: BulletNoteActionTypes.EDIT_MESSAGE,\r\n  payload: EditMessageActionPayload\r\n}\r\n\r\nexport const addMessage = (rawMessage: string): AddMessageAction => ({\r\n  type: BulletNoteActionTypes.ADD_MESSAGE,\r\n  payload: {\r\n    rawMessage,\r\n  }\r\n});\r\n\r\nexport const setMessageFromDB = (rawMessageFromDBList: SingleRawMessageFromDB[]): SetMessageFromDBAction => ({\r\n  type: BulletNoteActionTypes.SET_MESSAGE_FROM_DB,\r\n  payload: {\r\n    rawMessageFromDBList,\r\n  }\r\n});\r\n\r\nexport const deleteMessage = (id: string): DeleteMessageAction => ({\r\n  type: BulletNoteActionTypes.DELETE_MESSAGE,\r\n  payload: { id }\r\n});\r\n\r\nexport const toggleMessageIsDone = (id: string, isDone: boolean): ToggleMessageIsDone => ({\r\n  type: BulletNoteActionTypes.TOGGLE_MESSAGE_ISDONE,\r\n  payload: {\r\n    id,\r\n    isDone,\r\n  }\r\n});\r\n\r\nexport const toggleMessageIsStar = (id: string, isStar?: boolean): ToggleMessageIsStar => ({\r\n  type: BulletNoteActionTypes.TOGGLE_MESSAGE_ISSTAR,\r\n  payload: {\r\n    id,\r\n    isStar,\r\n  }\r\n});\r\n\r\nexport const toggleMessageIsPin = (id: string, isPin?: boolean): ToggleMessageIsPin => ({\r\n  type: BulletNoteActionTypes.TOGGLE_MESSAGE_ISPIN,\r\n  payload: {\r\n    id,\r\n    isPin,\r\n  }\r\n});\r\n\r\nexport const editMessage = (id: string, newMessage: string): EditMessageAction => ({\r\n  type: BulletNoteActionTypes.EDIT_MESSAGE,\r\n  payload: { \r\n    id,\r\n    newMessage \r\n  },\r\n});\r\n\r\ntype InputPartActions = \r\n  AddMessageAction | \r\n  SetMessageFromDBAction | \r\n  DeleteMessageAction | \r\n  ToggleMessageIsDone | \r\n  EditMessageAction | \r\n  ToggleMessageIsStar |\r\n  ToggleMessageIsPin\r\n\r\nexport default InputPartActions;","import React from 'react';\r\nimport { Box, Button } from '@material-ui/core';\r\nimport { DownloadMessageListProps } from './types';\r\nimport { MapStateToProps } from 'react-function-helpers/lib/functions/mapContextToProps';\r\nimport { BulletNoteState, ContextStore } from '../constants/context';\r\nimport { connectCtx } from 'react-function-helpers';\r\n\r\nexport const getJSONFile = (data: any) => {\r\n  return `data:text/json;charset=utf-8,${encodeURIComponent(JSON.stringify(data))}`;\r\n};\r\n\r\nconst DownloadMessageList = (props: DownloadMessageListProps) => {\r\n  const timeStamp = new Date().toLocaleString();\r\n  return (\r\n    <Button\r\n      href={getJSONFile(props.messageList)}\r\n      download={`bullet-note-backup-${timeStamp}.json`}\r\n    >\r\n      {'download backup'}\r\n    </Button>\r\n  );\r\n};\r\n\r\nconst mapStateToProps: MapStateToProps<BulletNoteState, {}, {\r\n  messageList: DownloadMessageListProps['messageList']\r\n}> = (state) => {\r\n  return ({\r\n    messageList: state.messageList,\r\n  });\r\n};\r\n\r\nconst DownloadMessageListWithCtx = connectCtx(ContextStore)(mapStateToProps)(DownloadMessageList);\r\n\r\nexport default DownloadMessageListWithCtx;","import { Callback } from \"common-types\";\r\nimport { ChangeEvent } from \"react\";\r\n\r\nconst handleUploadData = (getHandledDataFn?: Callback) => {\r\n  return (e: ChangeEvent<HTMLInputElement>) => {\r\n    let reader = new FileReader();\r\n\r\n    if(e.target.files && e.target.files.length > 0) {\r\n      console.log(e.target.files[0]);\r\n      reader.readAsText(e.target.files[0]);\r\n    }\r\n\r\n    reader.addEventListener('load', (e) => {\r\n      if(e.target && e.target.result && typeof e.target.result === 'string') {\r\n        const handledRes = JSON.parse(e.target.result);\r\n        console.log(handledRes);\r\n        getHandledDataFn && getHandledDataFn(handledRes);\r\n      }\r\n    });\r\n  };\r\n\r\n};\r\n\r\nexport default handleUploadData;","import React from 'react';\r\nimport { Box, Button } from '@material-ui/core';\r\nimport { read } from 'fs';\r\nimport handleUploadData from '../functions/handleUploadData';\r\n\r\nconst RestoreBackup = () => {\r\n  return (\r\n    <input type={'file'} onChange={handleUploadData()} />\r\n  );\r\n};\r\n\r\nexport default RestoreBackup;","import React from 'react';\r\nimport { Box, makeStyles } from '@material-ui/core';\r\nimport { BulletTagItemProps } from '../types';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    cursor: 'pointer',\r\n    backgroundColor: '#aff',\r\n    borderRadius: theme.spacing(0.5),\r\n    '&:hover': {\r\n      opacity: 0.8,\r\n    }\r\n  }\r\n}));\r\n\r\nconst BulletTagItem = (props: BulletTagItemProps) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Box className={classes.root} paddingLeft={0.5} paddingRight={0.5}>\r\n      {props.tagName}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default BulletTagItem;","import React from 'react';\r\nimport { Box } from '@material-ui/core';\r\nimport { BulletTagListProps } from '../types';\r\nimport BulletTagItem from './BulletTagItem';\r\n\r\nconst BulletTagList = (props: BulletTagListProps) => {\r\n  return (\r\n    <Box display={'flex'} paddingLeft={0.5}>\r\n      {props.tagList.map((t, i) => (\r\n        <Box paddingRight={0.5}>\r\n          <BulletTagItem \r\n            key={i}\r\n            tagName={t.name} />\r\n        </Box>\r\n      ))}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default BulletTagList;","import React from 'react';\r\nimport { Box, Button } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { MessageItemButtonsProps } from './types';\r\n\r\nconst MessageItemButtons = (props: MessageItemButtonsProps) => {\r\n  return (\r\n    <Box>\r\n      <Button onClick={props.onDelete}>\r\n        <Delete />\r\n      </Button>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MessageItemButtons;","import { useState, useEffect, useCallback } from \"react\";\r\nimport { Callback } from \"common-types\";\r\n\r\nconst useToggle = (init?: boolean, onChange?: Callback) => {\r\n  const [toggle, setToggle] = useState(!!init);\r\n\r\n  const handleToggle = useCallback(() => {\r\n    setToggle(s => !s);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    onChange && onChange(toggle);\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [toggle]);\r\n\r\n  useEffect(() => {\r\n    setToggle(!!init);\r\n  }, [init]);\r\n\r\n  return ({\r\n    toggle,\r\n    setToggle,\r\n    handleToggle,\r\n  });\r\n};\r\n\r\nexport default useToggle;","import React, { useState, useCallback, useEffect } from 'react';\r\nimport { Box } from '@material-ui/core';\r\nimport { Star, StarBorder } from '@material-ui/icons';\r\nimport { StarItemContainerProps } from '../types';\r\nimport useToggle from 'BulletNote/functions/useToggle';\r\n\r\nconst StarItemContainer = ({\r\n  onChange,\r\n  isStared,\r\n}: StarItemContainerProps) => {\r\n  const {\r\n    toggle: isStar,\r\n    handleToggle,\r\n  } = useToggle(isStared, onChange);\r\n\r\n  return (\r\n    <Box\r\n      style={{\r\n        cursor: 'pointer',\r\n      }}\r\n      onClick={handleToggle}\r\n    >\r\n      {isStar ? (\r\n        <Star />\r\n      ) : (\r\n        <StarBorder />\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default StarItemContainer;","import React from 'react';\r\nimport { Box } from '@material-ui/core';\r\nimport useToggle from 'BulletNote/functions/useToggle';\r\nimport { PinItemContainerProps } from '../types';\r\nimport { Flag, FlagOutlined } from '@material-ui/icons';\r\n\r\nconst PinItemContainer = ({\r\n  isPin,\r\n  onChange\r\n}: PinItemContainerProps) => {\r\n  const {\r\n    toggle: isPined,\r\n    handleToggle\r\n  } = useToggle(isPin, onChange);\r\n\r\n  return (\r\n    <Box\r\n      style={{\r\n        cursor: 'pointer',\r\n      }}\r\n      onClick={handleToggle}\r\n    >\r\n      {isPined ? (\r\n        <Flag />\r\n      ) : (\r\n        <FlagOutlined />\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default PinItemContainer;","import React, { ChangeEvent } from 'react';\r\nimport { Box, Typography, makeStyles } from '@material-ui/core';\r\nimport { BasicMessage } from '../types';\r\nimport BulletTagList from './BullteTagList';\r\nimport { BasicMessageItemProps } from './types';\r\nimport MessageItemButtons from './MessageItemButtons';\r\nimport StarItemContainer from '../containers/NotePart/StarItemContainer';\r\nimport PinItemContainer from '../containers/NotePart/PinItemContainer';\r\n\r\nconst regDateToString = (date: Date | string) => {\r\n  if(typeof date === 'string') return date;\r\n  const hour = date.getHours();\r\n  const min = date.getMinutes();\r\n  // return '';\r\n  return `${hour}:${min}`;\r\n};\r\n\r\nconst BasicMessageItem = (props: BasicMessageItemProps) => {\r\n  const {\r\n    content,\r\n    // dateTagList,\r\n    isStared,\r\n    isPin,\r\n    tagList,\r\n    createdAt,\r\n  } = props.message;\r\n\r\n  return (\r\n    <Box \r\n      display={'flex'} \r\n      width={'100%'}\r\n      justifyContent={'space-between'}\r\n      alignItems={'center'} \r\n    >\r\n      <Box\r\n        display={'flex'} \r\n      >\r\n        <Typography \r\n          variant={'subtitle1'} \r\n          contentEditable={true}\r\n          onInput={props.onEditMessage}\r\n        >\r\n          {content}\r\n        </Typography>\r\n        <BulletTagList\r\n          tagList={tagList} />\r\n        <Typography variant={'body1'} color={'textSecondary'}>\r\n          {regDateToString(createdAt)}\r\n        </Typography>\r\n      </Box>\r\n      <Box\r\n        display={'flex'} \r\n        alignItems={'center'} \r\n      >\r\n        <StarItemContainer\r\n          isStared={isStared}\r\n          onChange={props.onStarMessage} />\r\n        <PinItemContainer\r\n          isPin={isPin}\r\n          onChange={props.onPinMessage} />\r\n        <MessageItemButtons\r\n          onDelete={props.onDelete} />\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default BasicMessageItem;","import React, { useCallback, ChangeEvent } from 'react';\r\nimport { Box } from '@material-ui/core';\r\nimport BasicMessageItem from '../components/BasicMessageItem';\r\nimport { BasicMessageItemContainerProps, BasicMessageItemContainerWithCtxProps } from './types';\r\nimport { MapDispatchToProps } from 'react-function-helpers/lib/functions/mapContextToProps';\r\nimport { editMessage, toggleMessageIsStar, toggleMessageIsPin } from '../actions/message-actions';\r\nimport { connectCtx } from 'react-function-helpers';\r\nimport { ContextStore } from '../constants/context';\r\n\r\nconst BasicMessageItemContainer = (props: BasicMessageItemContainerProps) => {\r\n  const {\r\n    editActionFn,\r\n    starActionFn,\r\n    pinActionFn,\r\n    message\r\n  } = props;\r\n  \r\n  const { id } = message;\r\n\r\n  const handleEdit = useCallback((e: ChangeEvent<HTMLElement>) => {\r\n    const { innerText } = e.target;\r\n    editActionFn(id, innerText);\r\n  }, [editActionFn, id]);\r\n\r\n  const handleToggleStarMessage = useCallback((isStar: boolean | undefined) => {\r\n    starActionFn(id, isStar);\r\n  }, [id, starActionFn]);\r\n\r\n  const handleTogglePinMessage = useCallback((isPin: boolean | undefined) => {\r\n    pinActionFn(id, isPin);\r\n  }, [id, pinActionFn]);\r\n\r\n  return (\r\n    <BasicMessageItem\r\n      {...props}\r\n      onPinMessage={handleTogglePinMessage}\r\n      onStarMessage={handleToggleStarMessage}\r\n      onEditMessage={handleEdit} />\r\n  );\r\n};\r\n\r\ninterface OwnProps extends BasicMessageItemContainerWithCtxProps {}\r\n\r\nconst mapDispatchToProps: MapDispatchToProps<OwnProps, {\r\n  editActionFn: BasicMessageItemContainerProps['editActionFn'],\r\n  starActionFn: BasicMessageItemContainerProps['starActionFn'],\r\n  pinActionFn: BasicMessageItemContainerProps['pinActionFn'],\r\n}> = (dispatch) => {\r\n  return ({\r\n    editActionFn: (id: string, newMessage: string) => {\r\n      const action = editMessage(id, newMessage);\r\n      dispatch(action);\r\n    },\r\n    starActionFn: (id, isStar) => {\r\n      const action = toggleMessageIsStar(id, isStar);\r\n      dispatch(action); \r\n    },\r\n    pinActionFn: (id, isPin) => {\r\n      const action = toggleMessageIsPin(id, isPin);\r\n      dispatch(action); \r\n    },\r\n  });\r\n};\r\n\r\nconst BasicMessageItemContainerWithCtx = connectCtx(ContextStore)(undefined, mapDispatchToProps)(BasicMessageItemContainer);\r\n\r\nexport default BasicMessageItemContainerWithCtx;","import React from 'react';\r\nimport { Box, makeStyles } from '@material-ui/core';\r\nimport { MessageItemWrapperProps } from '../types';\r\nimport BasicMessageItem from '../BasicMessageItem';\r\nimport BasicMessageItemContainerWithCtx from 'BulletNote/containers/BasicMessageItemContainer';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    // cursor: 'pointer',\r\n    '&:hover': {\r\n      backgroundColor: '#eee',\r\n    }\r\n  }\r\n}));\r\n\r\n\r\nconst MessageItemWrapper = (props: MessageItemWrapperProps) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Box\r\n      display={'flex'} \r\n      alignItems={'center'} \r\n      className={classes.root}\r\n    >\r\n      {props.children}\r\n      <BasicMessageItemContainerWithCtx\r\n        {...props} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MessageItemWrapper;  ","import React, { useCallback } from 'react';\r\nimport { Box } from '@material-ui/core';\r\nimport { MessageItemWrapperContainerProps, MessageItemWrapperContainerWithCtxProps } from '../types';\r\nimport MessageItemWrapper from 'BulletNote/components/wrappers/MessageItemWrapper';\r\nimport { MapDispatchToProps } from 'react-function-helpers/lib/functions/mapContextToProps';\r\nimport { deleteMessage } from 'BulletNote/actions/message-actions';\r\nimport { connectCtx } from 'react-function-helpers';\r\nimport { ContextStore } from 'BulletNote/constants/context';\r\n\r\nconst MessageItemWrapperContainer = (props: MessageItemWrapperContainerProps) => {\r\n  const {\r\n    message,\r\n    onDelete\r\n  } = props;\r\n\r\n  const {\r\n    id,\r\n  } = message;\r\n\r\n  const handleDelete = useCallback(() => {\r\n    if(window.confirm('Are you sure delete?')) {\r\n      onDelete(id);\r\n    }\r\n  }, [id, onDelete]);\r\n\r\n  return (\r\n    <MessageItemWrapper\r\n      {...props}\r\n      onDelete={handleDelete} />\r\n  );\r\n};\r\n\r\ninterface OwnProps extends MessageItemWrapperContainerWithCtxProps {}\r\n\r\nconst mapDispatchToProps: MapDispatchToProps<OwnProps, {\r\n  onDelete: MessageItemWrapperContainerProps['onDelete']\r\n}> = (dispatch) => {\r\n  return ({\r\n    onDelete: (id: string) => {\r\n      const action = deleteMessage(id);\r\n      dispatch(action);\r\n    }\r\n  });\r\n};\r\n\r\nconst MessageItemWrapperContainerWithCtx = connectCtx(ContextStore)(undefined, mapDispatchToProps)(MessageItemWrapperContainer);\r\n\r\nexport default MessageItemWrapperContainerWithCtx;","import React from 'react';\r\nimport { Checkbox } from '@material-ui/core';\r\nimport { ToDoMessageItemProps } from './types';\r\nimport MessageItemWrapperContainerWithCtx from '../containers/wrappers/MessageItemWrapperContainer';\r\n\r\nconst TodoMessageItem = (props: ToDoMessageItemProps) => {\r\n  return (\r\n    <MessageItemWrapperContainerWithCtx\r\n      {...props}>\r\n      <Checkbox\r\n        color={'primary'}\r\n        onChange={props.onToggleTodo}\r\n        checked={!!props.status.isDone} />\r\n    </MessageItemWrapperContainerWithCtx>\r\n  );\r\n};\r\n\r\nexport default TodoMessageItem;","import React, { useCallback } from 'react';\r\nimport { Box } from '@material-ui/core';\r\nimport { TodoMessageItemContainerProps, TodoMessageItemContainerWithCtxProps } from '../types';\r\nimport { MapDispatchToProps } from 'react-function-helpers/lib/functions/mapContextToProps';\r\nimport TodoMessageItem from 'BulletNote/components/TodoMessageItem';\r\nimport { toggleMessageIsDone } from 'BulletNote/actions/message-actions';\r\nimport { connectCtx } from 'react-function-helpers';\r\nimport { ContextStore } from 'BulletNote/constants/context';\r\n\r\nconst TodoMessageItemContainer = (props: TodoMessageItemContainerProps) => {\r\n  const {\r\n    message,\r\n    toggleTodoActionFn,\r\n  } = props;\r\n  const {\r\n    id\r\n  } = message;\r\n\r\n  const handleToggleTodo = useCallback((e: any, isDone: boolean) => {\r\n    return toggleTodoActionFn(id, isDone);\r\n  }, [id, toggleTodoActionFn]);\r\n\r\n  return (\r\n    <TodoMessageItem\r\n      {...props}\r\n      onToggleTodo={handleToggleTodo} />\r\n  );\r\n};\r\n\r\ntype OwnProps = TodoMessageItemContainerWithCtxProps\r\n\r\nconst mapDispatchToProps: MapDispatchToProps<OwnProps, {\r\n  toggleTodoActionFn: TodoMessageItemContainerProps['toggleTodoActionFn']\r\n}> = (dispatch) => {\r\n  return ({\r\n    toggleTodoActionFn: (id: string, isDone: boolean) => {\r\n      const action = toggleMessageIsDone(id, isDone);\r\n      dispatch(action);\r\n    },\r\n  });\r\n};\r\n\r\nconst TodoMessageItemContainerWithCtx = connectCtx(ContextStore)(undefined, mapDispatchToProps)(TodoMessageItemContainer);\r\n\r\nexport default TodoMessageItemContainerWithCtx;","import React from 'react';\r\nimport { Box } from '@material-ui/core';\r\nimport { DefaultMessageItemProps } from './types';\r\nimport MessageItemWrapperContainerWithCtx from 'BulletNote/containers/wrappers/MessageItemWrapperContainer';\r\nimport { KeyboardArrowRight } from '@material-ui/icons';\r\n\r\nconst DefaultMessageItem = (props: DefaultMessageItemProps) => {\r\n  return (\r\n    <MessageItemWrapperContainerWithCtx\r\n      {...props}>\r\n      <KeyboardArrowRight />\r\n    </MessageItemWrapperContainerWithCtx>\r\n  );\r\n};\r\n\r\nexport default DefaultMessageItem;","import React from 'react';\r\nimport TodoMessageItem from '../components/TodoMessageItem';\r\nimport { MessageItem, MESSAGE_TYPE, TagNoteBlockItemProps } from '../types';\r\nimport TodoMessageItemContainerWithCtx from '../containers/NotePart/TodoMessageItemContainer';\r\nimport DefaultMessageItem from 'BulletNote/components/DefaultMessageItem';\r\n\r\nconst switchMessagesByType = ({\r\n  index, \r\n  messageItemProps,\r\n}: {\r\n  messageItemProps: MessageItem, \r\n  index: number,\r\n}) => {\r\n  switch (messageItemProps.type) {\r\n    \r\n  case MESSAGE_TYPE.TODO: {\r\n    return (\r\n      <TodoMessageItemContainerWithCtx\r\n        key={index}\r\n        {...messageItemProps}\r\n      />\r\n    );\r\n  }\r\n\r\n  case MESSAGE_TYPE.DEFAULT: {\r\n    return (\r\n      <DefaultMessageItem\r\n        key={index}\r\n        {...messageItemProps} />\r\n    );\r\n  }\r\n  \r\n  default:\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default switchMessagesByType;","import React from 'react';\r\nimport { Box, Typography, Divider, Paper } from '@material-ui/core';\r\nimport { PinMessageListProps } from '../types';\r\nimport switchMessagesByType from '../../functions/switchMessagesByType';\r\nimport { MessageList } from '../../types';\r\n\r\nexport const filterPinedMessageList = (messageList: MessageList) => {\r\n  return messageList.filter(m => m.message.isPin);\r\n};\r\n\r\nconst PinMessageList = (props: PinMessageListProps) => {\r\n  const filteredPinMessageList = filterPinedMessageList(props.messageList);\r\n\r\n  return (\r\n    <Paper elevation={2}>\r\n      <Typography>\r\n        {'Pin Messages'}\r\n      </Typography>\r\n      {filteredPinMessageList.map((m, index) => (\r\n        switchMessagesByType({\r\n          index,\r\n          messageItemProps: m\r\n        })\r\n      ))}\r\n      <Divider />\r\n    </Paper>\r\n  );\r\n};\r\n\r\nexport default PinMessageList;","import { MessageList, NoteBlockItemProps } from \"../types\";\r\n\r\nclass HandleMessageList {\r\n  static regDateToString(date: Date | string) {\r\n    const dateObj = new Date(date);\r\n    return dateObj.toLocaleDateString();\r\n  }\r\n\r\n  static checkTwoDateIsSame(date1: Date | string, date2: Date | string) {\r\n    if(!date1 || !date2) {\r\n      return false;\r\n    }\r\n    console.log(date1, date2);\r\n    const date1Str = this.regDateToString(date1);\r\n    const date2Str = this.regDateToString(date2);\r\n    return date1Str === date2Str;\r\n  }\r\n\r\n  static convertToMessageWithDateList(_messageList: MessageList) : NoteBlockItemProps[] {\r\n    let date: string | Date = '';\r\n    let noteBlockIndex = -1;\r\n    let messageWithDateList: NoteBlockItemProps[] = [{\r\n      date,\r\n      messageList: [],\r\n    }];\r\n    \r\n    for (let i = 0; i < _messageList.length; i++) {\r\n      const messageItem = _messageList[i];\r\n      const createdAt = messageItem.message.createdAt;\r\n      const dateIsSame = this.checkTwoDateIsSame(createdAt, date);\r\n      if(!dateIsSame) {\r\n        date = createdAt;\r\n        noteBlockIndex += 1;\r\n      }\r\n      messageWithDateList[noteBlockIndex] = {\r\n        date,\r\n        messageList: [\r\n          ...(\r\n            messageWithDateList[noteBlockIndex] ? messageWithDateList[noteBlockIndex].messageList : []\r\n          ),\r\n          messageItem,\r\n        ]\r\n      };\r\n    }\r\n  \r\n    return messageWithDateList;\r\n  };\r\n}\r\n\r\nexport default HandleMessageList;","import React from 'react';\r\nimport { Box, Typography } from '@material-ui/core';\r\nimport { DateTitleProps } from '../types';\r\n\r\nconst removeYearRegExp = /^(\\d+\\/)/g;\r\n\r\nconst DateTitle = (props: DateTitleProps) => {\r\n  const dateTitle = (new Date(props.date)).toLocaleDateString();\r\n  const dateWithoutYear = dateTitle.replace(removeYearRegExp, '');\r\n  return (\r\n    <Typography variant={'h5'}>\r\n      {dateWithoutYear}\r\n    </Typography>\r\n  );\r\n};\r\n\r\nexport default DateTitle;","import { MessageList, TagNoteBlockList, TagNoteBlockItem, MessageItem, TagNoteBlockObj } from \"../types\";\r\n\r\nclass HandleTagSortMessage {\r\n  static checkNewStrIsInStrList(strList: string[], newStr: string) {\r\n    return strList.includes(newStr);\r\n  }\r\n\r\n  static checkNewStrListIsInStrList(strList: string[], newStrList: string[]) {\r\n    if(newStrList.length === 0) {\r\n      return true;\r\n    }\r\n    for (let i = 0; i < newStrList.length; i++) {\r\n      const str = newStrList[i];\r\n      const isInList = this.checkNewStrIsInStrList(strList, str);\r\n      if(isInList) {\r\n        return true;\r\n      };\r\n    }\r\n    return false;\r\n  }\r\n\r\n  static addNewStrToStrList(strList: string[], newStr: string) {\r\n    const isIncludes = this.checkNewStrIsInStrList(strList, newStr);\r\n    if(isIncludes) {\r\n      return strList;\r\n    }\r\n    return [\r\n      ...strList,\r\n      newStr,\r\n    ];\r\n  }\r\n\r\n  static addNewStrListToStrList(strList: string[], newStrList: string[]) {\r\n    let res = strList;\r\n    for (let i = 0; i < newStrList.length; i++) {\r\n      const str = newStrList[i];\r\n      res = this.addNewStrToStrList(res, str);\r\n    }\r\n    return res;\r\n  }\r\n\r\n  static getTagNamesFromMessage(singleMessage: MessageItem) {\r\n    return singleMessage.message.tagList.map(\r\n      t => t.name\r\n    );\r\n  }\r\n\r\n  static getTagNoteBlockObj(_messageList: MessageList) {\r\n    let tags: string[] = [];\r\n    let tagNoteBlockObj: TagNoteBlockObj = {};\r\n    \r\n    for (let i = 0; i < _messageList.length; i++) {\r\n      const singleMessage = _messageList[i];\r\n      const singleMessageTags = this.getTagNamesFromMessage(singleMessage);\r\n      tags = this.addNewStrListToStrList(tags, singleMessageTags);\r\n      const isNewTagsInTags = this.checkNewStrListIsInStrList(tags, singleMessageTags);\r\n\r\n      if(singleMessageTags.length > 0) {\r\n        const newTag = singleMessageTags[0];\r\n\r\n        if(tagNoteBlockObj[newTag]) {\r\n          tagNoteBlockObj[newTag] = {\r\n            ...tagNoteBlockObj[newTag],\r\n            messageList: [\r\n              ...tagNoteBlockObj[newTag].messageList,\r\n              singleMessage,\r\n            ]\r\n          };\r\n        } else {\r\n          tagNoteBlockObj[newTag] = {\r\n            tagTitle: newTag,\r\n            messageList: [\r\n              singleMessage,\r\n            ]\r\n          };\r\n        }\r\n      }\r\n    }\r\n    return tagNoteBlockObj;\r\n  }\r\n\r\n\r\n}\r\n\r\nexport default HandleTagSortMessage;","import React from 'react';\r\nimport { Box, Typography } from '@material-ui/core';\r\nimport { TagNoteBlockItemProps } from '../types';\r\nimport switchMessagesByType from '../functions/switchMessagesByType';\r\nimport { tabSpace } from '../config';\r\n\r\nconst TagNoteBlockItem = (props: TagNoteBlockItemProps) => {\r\n  return (\r\n    <Box paddingLeft={tabSpace}>\r\n      <Typography variant={'h6'} color={'textPrimary'}>\r\n        {props.tagTitle}\r\n      </Typography>\r\n      <Box paddingLeft={tabSpace}>\r\n        {props.messageList.map((messageItemProps, index) => (\r\n          switchMessagesByType({\r\n            index,\r\n            messageItemProps,\r\n          })\r\n        ))}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default TagNoteBlockItem;","export const tabSpace = 1.5;","import React from 'react';\r\nimport TagNoteBlockItem from 'BulletNote/components/TagNoteBlockItem';\r\nimport { TagNoteBlockItemContainerProps } from '../types';\r\n\r\nconst TagNoteBlockItemContainer = (props: TagNoteBlockItemContainerProps) => {\r\n  return (\r\n    <TagNoteBlockItem\r\n      {...props} />\r\n  );\r\n};\r\n\r\nexport default TagNoteBlockItemContainer;","import React from 'react';\r\nimport { Box, makeStyles, Theme } from '@material-ui/core';\r\nimport { NoteBlockItemProps } from '../types';\r\nimport switchMessagesByType from '../functions/switchMessagesByType';\r\nimport DateTitle from './DateTitle';\r\nimport HandleTagSortMessage from '../functions/handleTagSortMessage';\r\nimport TagNoteBlockItem from './TagNoteBlockItem';\r\nimport TagNoteBlockItemContainerWithCtx from '../containers/NotePart/TagNoteBlockItemContainer';\r\n\r\nconst useStyles = makeStyles<Theme, NoteBlockItemProps>(theme => ({\r\n  root: {\r\n    borderRadius: 4,\r\n    borderColor: props => props.selected ? '#ddd' : 'transparent',\r\n    borderWidth: 2,\r\n    borderStyle: 'solid',\r\n  }\r\n}));\r\n\r\nconst NoteBlockItem = (props: NoteBlockItemProps) => {\r\n  const {\r\n    date,\r\n    messageList,\r\n  } = props;\r\n  const classes = useStyles(props);\r\n\r\n  const tagNoteBlockObj = HandleTagSortMessage.getTagNoteBlockObj(messageList);\r\n  const tags = Object.keys(tagNoteBlockObj);\r\n  \r\n  return (\r\n    <>\r\n      <Box padding={0.5} paddingBottom={2} className={classes.root}>\r\n        <Box paddingBottom={1}>\r\n          <DateTitle\r\n            date={date} />\r\n        </Box>\r\n        {tags.map((t, i) => (\r\n          <TagNoteBlockItemContainerWithCtx\r\n            key={i}\r\n            {...tagNoteBlockObj[t]} />\r\n        ))}\r\n      </Box>\r\n      {/* <hr /> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NoteBlockItem;","import HandleMessageList from \"./handleMessageListToMessageWithDateList\";\r\n\r\nconst checkDateIsToday = (date: Date | string) => {\r\n  const res = HandleMessageList.checkTwoDateIsSame(new Date(), date);\r\n  return res;\r\n};\r\n\r\nexport default checkDateIsToday;","import React from 'react';\r\nimport { Box, Typography } from '@material-ui/core';\r\nimport { NoteBlockListProps } from '../types';\r\nimport HandleMessageList from '../functions/handleMessageListToMessageWithDateList';\r\nimport NoteBlockItem from './NoteBlockItem';\r\nimport checkDateIsToday from '../functions/checkDateIsToday';\r\n\r\nconst NoteBlockList = (props: NoteBlockListProps) => {\r\n  const {\r\n    messageList\r\n  } = props;\r\n\r\n  if(messageList.length === 0) {\r\n    return (\r\n      <Typography variant={'h5'} color={'textSecondary'}>\r\n        {'No notes yet :>'}\r\n      </Typography>\r\n    );\r\n  }\r\n\r\n  const messageListWithDate = HandleMessageList\r\n    .convertToMessageWithDateList(messageList);\r\n  return (\r\n    <Box>\r\n      {messageListWithDate.map((m, i) => (\r\n        <NoteBlockItem\r\n          key={i}\r\n          {...m}\r\n          selected={checkDateIsToday(m.date)} />\r\n      ))}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default NoteBlockList;","import { Ref, RefObject, useRef, useCallback } from \"react\";\r\n\r\nconst useScrollToView = () => {\r\n  const ref = useRef<HTMLDivElement>(null);\r\n\r\n  const handleScrollToView = useCallback(() => {\r\n    if(ref.current) {\r\n      ref.current.scrollIntoView({\r\n        block: 'end',\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  return ({\r\n    ref,\r\n    handleScrollToView,\r\n  });\r\n};\r\n\r\nexport default useScrollToView;","import React from 'react';\r\nimport { Box, RootRef } from '@material-ui/core';\r\nimport NoteBlockList from 'BulletNote/components/NoteBlockList';\r\nimport useScrollToView from 'BulletNote/functions/useScrollToView';\r\nimport { NoteBlockListContainerProps } from './types';\r\n\r\nconst NoteBlockListContainer = (props: NoteBlockListContainerProps) => {\r\n  const {\r\n    ref,\r\n    handleScrollToView,\r\n  } = useScrollToView();\r\n\r\n  React.useEffect(() => {\r\n    handleScrollToView();\r\n  }, [props.messageList, handleScrollToView]);\r\n\r\n  return (\r\n    <RootRef rootRef={ref}>\r\n      <NoteBlockList\r\n        {...props}  />\r\n    </RootRef>\r\n  );\r\n};\r\n\r\nexport default NoteBlockListContainer;","import React from 'react';\r\nimport { Box, makeStyles } from '@material-ui/core';\r\nimport { NotePartProps } from '../types';\r\nimport DownloadMessageListWithCtx from '../DownloadMessageList';\r\nimport RestoreBackup from '../RestoreBackup';\r\nimport PinMessageList from './PinMessageList';\r\nimport NoteBlockListContainer from 'BulletNote/containers/NoteBlockListContainer';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  pinMessageListPart: {\r\n    position: 'sticky',\r\n    top: 0,\r\n    maxHeight: 200,\r\n    overflow: 'auto',\r\n    zIndex: 1000,\r\n    boxShadow: '0px 10px 10px rgba(0, 0, 0, 0.07)',\r\n  },\r\n  root: {\r\n    \r\n  }\r\n}));\r\n\r\nconst NotePart = (props: NotePartProps) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <Box className={classes.pinMessageListPart}>\r\n        <PinMessageList\r\n          messageList={props.messageList} />\r\n      </Box>\r\n      <Box>\r\n        <DownloadMessageListWithCtx />\r\n        <RestoreBackup />\r\n      </Box>\r\n      <NoteBlockListContainer\r\n        {...props} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NotePart;","import React from 'react';\r\nimport { Box } from '@material-ui/core';\r\nimport NotePart from '../../components/NotePart/NotePart';\r\nimport { BulletNoteState, ContextStore } from 'BulletNote/constants/context';\r\nimport { MapStateToProps, MapDispatchToProps } from 'react-function-helpers/lib/functions/mapContextToProps';\r\nimport { connectCtx } from 'react-function-helpers';\r\nimport HandleDataInLocalStorage from 'BulletNote/functions/HandleDataInLocalStorage';\r\nimport { setMessageFromDB } from 'BulletNote/actions/message-actions';\r\nimport { NotePartProps } from 'BulletNote/components/types';\r\n\r\nconst NotePartContainer = (props: NotePartProps) => {\r\n  const {\r\n    setMessageFromDB\r\n  } = props;\r\n\r\n  React.useEffect(() => {\r\n    setMessageFromDB();\r\n  }, [setMessageFromDB]);\r\n\r\n  return (\r\n    <NotePart\r\n      {...props} />\r\n  );\r\n};\r\n\r\n\r\ninterface OwnProps {}\r\n\r\nconst mapStateToProps: MapStateToProps<BulletNoteState, OwnProps, Omit<NotePartProps, 'setMessageFromDB'>> = (state) => {\r\n  return ({\r\n    messageList: state.messageList,\r\n  });\r\n};\r\n\r\nconst mapDispatchToProps: MapDispatchToProps<OwnProps, Omit<NotePartProps, 'messageList'>> = (dispatch) => {\r\n  return ({\r\n    setMessageFromDB: () => {\r\n      const messageList = HandleDataInLocalStorage.getData();\r\n      console.log(messageList);\r\n      const action = setMessageFromDB(messageList);\r\n      dispatch(action);\r\n    }\r\n  });\r\n};\r\n\r\nconst NotePartContainerWithCtx = connectCtx(ContextStore)(mapStateToProps, mapDispatchToProps)(NotePartContainer);\r\n\r\nexport default NotePartContainerWithCtx;","import React from 'react';\r\nimport { Box, makeStyles, Container } from '@material-ui/core';\r\nimport ContextWrapper from './constants/context';\r\nimport InputPartContainerWithCtx from './containers/InputPart/InputPartContainer';\r\nimport NotePartContainerWithCtx from './containers/NotePart/NotePartContainer';\r\nimport './styles/style.scss';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    '&::-webkit-scrollbar': {\r\n      width: 8,\r\n    }\r\n  },\r\n  notePart: {\r\n    maxHeight: 'calc(100vh - 80px)',\r\n    overflow: 'auto',\r\n  },\r\n  inputPart: {\r\n    position: 'fixed',\r\n    bottom: theme.spacing(1),\r\n    left: theme.spacing(1),\r\n    right: theme.spacing(1),\r\n  }\r\n}));\r\n\r\nconst BulletNote = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <ContextWrapper customInitState={{\r\n      // messageList: messageList\r\n    }}>\r\n      <Container>\r\n        <Box padding={1} className={classes.root}>\r\n          <Box className={classes.notePart}>\r\n            <NotePartContainerWithCtx />\r\n          </Box>\r\n          <Box className={classes.inputPart}>\r\n            <InputPartContainerWithCtx />\r\n          </Box>\r\n        </Box>\r\n      </Container>\r\n    </ContextWrapper>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default BulletNote;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport BulletNote from 'BulletNote';\r\n\r\nfunction App() {\r\n  return (\r\n    <BulletNote />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}